# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ernestojv
# "service" is the name of this project. This will also be added to your AWS resource names.
service: dronofy-fc

provider:
  name: aws
  runtime: nodejs20.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [DistributionCenterTable, Arn]
            - Fn::GetAtt: [ProductTable, Arn]
            - Fn::GetAtt: [SupplierTable, Arn]
            - Fn::GetAtt: [DroneTable, Arn]
            - Fn::GetAtt: [PurchaseOrderTable, Arn]
            - Fn::GetAtt: [PickupOrderTable, Arn]
  environment:
    DISTRIBUTIONCENTER_TABLE: DistributionCenterTable
    PRODUCT_TABLE: ProductTable
    SUPPLIER_TABLE: SupplierTable
    DRONE_TABLE: DroneTable
    PURCHASEORDER_TABLE: PurchaseOrderTable
    PICKUPORDER_TABLE: PickupOrderTable
functions:
  #Distribution Center
  createDistributionCenter:
    handler: src/handlers/distributionCenterHandler.create
    events:
      - http:
          path: distribution-center
          method: post
          cors: true
  getNearbyDistributionCenters:
    handler: src/handlers/distributionCenterHandler.getNearby
    events:
      - http:
          path: distribution-center/nearby
          method: get
          cors: true
  getDistributionCenterById:
    handler: src/handlers/distributionCenterHandler.getById
    events:
      - http:
          path: distribution-center/{id}
          method: get
          cors: true
  getDistributionCenters:
    handler: src/handlers/distributionCenterHandler.getAll
    events:
      - http:
          path: distribution-center
          method: get
          cors: true
  #Product
  createProduct:
    handler: src/handlers/productHandler.create
    events:
      - http:
          path: product
          method: post
          cors: true
  getProductById:
    handler: src/handlers/productHandler.getById
    events:
      - http:
          path: product/{id}
          method: get
          cors: true
  getProducts:
    handler: src/handlers/productHandler.getAll
    events:
      - http:
          path: product
          method: get
          cors: true

  #Supplier
  createSupplier:
    handler: src/handlers/supplierHandler.create
    events:
      - http:
          path: supplier
          method: post
          cors: true
  getSupplierById:
    handler: src/handlers/supplierHandler.getById
    events:
      - http:
          path: supplier/{id}
          method: get
          cors: true
  getSuppliers:
    handler: src/handlers/supplierHandler.getAll
    events:
      - http:
          path: supplier
          method: get
          cors: true
  #Drone
  createDrone:
    handler: src/handlers/droneHandler.create
    events:
      - http:
          path: drone
          method: post
          cors: true
  getDroneById:
    handler: src/handlers/droneHandler.getById
    events:
      - http:
          path: drone/{id}
          method: get
          cors: true
  getDrones:
    handler: src/handlers/droneHandler.getAll
    events:
      - http:
          path: drone
          method: get
          cors: true
  #Purchase Order
  createPurchaseOrder:
    handler: src/handlers/purchaseOrderHandler.create
    events:
      - http:
          path: purchase-order
          method: post
          cors: true
  getPurchaseOrderById:
    handler: src/handlers/purchaseOrderHandler.getById
    events:
      - http:
          path: purchase-order/{id}
          method: get
          cors: true
  getPurchaseOrders:
    handler: src/handlers/purchaseOrderHandler.getAll
    events:
      - http:
          path: purchase-order
          method: get
          cors: true
  #Pickup Order
  createPickupOrder:
    handler: src/handlers/pickupOrderHandler.create
    events:
      - http:
          path: pickup-order
          method: post
          cors: true
  getPickupOrderById:
    handler: src/handlers/pickupOrderHandler.getById
    events:
      - http:
          path: pickup-order/{id}
          method: get
          cors: true
  getPickupOrders:
    handler: src/handlers/pickupOrderHandler.getAll
    events:
      - http:
          path: pickup-order
          method: get
          cors: true

#DynamoDB Tables
resources:
  Resources:
    DistributionCenterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: distributionCenterId
            AttributeType: S
        KeySchema:
          - AttributeName: distributionCenterId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: DistributionCenterTable
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ProductTable
    SupplierTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: supplierId
            AttributeType: S
        KeySchema:
          - AttributeName: supplierId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: SupplierTable
    DroneTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: droneId
            AttributeType: S
        KeySchema:
          - AttributeName: droneId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: DroneTable
    PurchaseOrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: purchaseOrderId
            AttributeType: S
        KeySchema:
          - AttributeName: purchaseOrderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: PurchaseOrderTable
    PickupOrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: pickupOrderId
            AttributeType: S
        KeySchema:
          - AttributeName: pickupOrderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: PickupOrderTable